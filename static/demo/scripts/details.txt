<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Neuralmaterial</title>
</head>

<body id="body">

<div id="warning" style="text-align:center;">
    Dear SIGGRPAH Asia 2021 reviewers,<br/>
    To enable the interactive rendering, the browser (in particular WebGL) needs access to local files. To run your browser with authorization to access files, please <b>first close all browser related processes </b>, then open a command line and run the following (OS dependent):
    <br/>
    <br/>
    For Chrome on MacOS:<br/><br/>
    <tt>/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --allow-file-access-from-files</tt>
    <br/>
    <br/>
    For Chrome on Linux:<br/><br/>
    <tt>google-chrome --allow-file-access-from-files</tt>
    <br/>
    <br/>
    For Chrome on Windows:<br/><br/>
    <tt>"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --allow-file-access-from-files</tt>
    <br/>
    <br/>
    Alternatively you can start a local web server to host our HTML file.<br/>
    Thanks, the authors.
</div>

<h1> Material <span id="material_id"></span></h1>

<button onclick="goBack()">Back to Overview</button>
<button onclick="prev()">Prev</button>
<button onclick="next()">Next</button>

<div id="default">
    <div id="groundTruth" style="float: left; padding-right:20px;">
        <h2> Input </h2>
        <img id="inputImage" src="" alt="input image"/>
    </div>
    <div id="rendering" style="float: left; padding-right:20px;">
        <div id="webGL">
            <h2> Output (Move mouse to change light) </h2>
            <canvas width="512" height="384" id="canvas" onMouseMove="updateMousePosition(this, event)">
            </canvas>
        </div>
        <div id="noWebGL">
            <h2 id="errorMsgGL"> Output (Safari does not support Webgl2, please switch to chrome for interactive renderings) </h2>
            <img id="backupImage">
        </div>
    </div>
    <div id="debugOptions" style="float: left;">
        <select onChange="drawBRDFNoise()" id="lightMode" value="1" style="display: block; margin-top:10px;">
            <option>Mouse light</option>
            <option>Central light</option>
            <option>Left light</option>
            <option>Right light</option>
        </select>
        <select onChange="drawBRDFNoise()" id="diffuseMode" value="1" style="display: block; margin-top:10px;">
        <option>Diffuse map</option>
        <option>Diffuse constant</option>
        <option>Diffuse one</option>
        <option>Diffuse zero</option>
        </select>
        <select onChange="drawBRDFNoise()" id="specularMode" value="1" style="display: block; margin-top:10px;">
        <option>Specular map</option>
        <option>Specular constant</option>
        <option>Specular one</option>
        <option>Specular zero</option>
        </select>
        <select onChange="drawBRDFNoise()" id="roughnessMode" value="1" style="display: block; margin-top:10px;">
        <option>Roughness map</option>
        <option>Roughness constant</option>
        <option>Roughness one</option>
        <option>Roughness zero</option>
        </select>
        <select onChange="drawBRDFNoise()" id="normalMode" value="1" style="display: block; margin-top:10px;">
        <option>Normal map</option>
        <option>Normal constant</option>
        <option>Normal one</option>
        <option>Normal zero</option>
        </select>
    </div>
</div>

<div class="container" style="clear:both;">

    <div id="options" style="maring-top:20px;">
        <h3> Select options </h3>
        <div style="float:left; margin-right: 20px;">
            <label style="display:block;cursor: pointer;"><input type="radio" name="resultOption" value="decomposition" id="cbDecomposition" checked> Decomposition</label>
            <label style="display:block;cursor: pointer;"><input type="radio" name="resultOption" value="interpolation" id="cbInterpolation"> Interpolation</label>
        </div>
        <select id="sSeed" style="display: block; margin-top:70px;">
            <option value="1">Seed 1</option>
            <option value="2">Seed 2</option>
            <option value="3">Seed 3</option>
        </select>
    </div>
    <div style="clear:both"></div>
    <div id="decomposition" style="clear:both;">
        <h2> Decomposition </h2>
        <table id='tbDecomposition' style="width: 100%;table-layout: fixed;">
            <thead>
                <tr>
                <th> Re-rendering center light</th>
                <th> Re-rendering top light</th>
                <th> Diffuse </th>
                <th> Specular </th>
                <th> Roughness </th>
                <th> Normal </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
<!--        <div id="ablations">-->
<!--            <table id='tbAblations' style="width:100%">-->
<!--                <tbody>-->
<!--                </tbody>-->
<!--            </table>-->
<!--        </div>-->

<!--        <div id="competitors">-->
<!--            <table id='tbCompetitors' style="width:100%;border-spacing: 0px;">-->
<!--                <tbody>-->
<!--                </tbody>-->
<!--            </table>-->
<!--        </div>-->
    </div>



    <div id="interpolation">
        <h1> Interpolation </h1>
        <h2> Select image to interpolate with </h2>
        <div id="interpolationImages">
        </div>
        <table id='tbInterpolation' style="width:100%;border-spacing: 0px;">
            <thead>
                <tr>
                <th> Rendering 1 </th>
                <th>  </th>
                <th>  </th>
                <th>  </th>
                <th>  </th>
                <th>  </th>
                <th> Rendering 2 </th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<script id="renderingFragment" type="x-shader/x-fragment">#version 300 es
precision highp float;
precision highp int;
precision highp sampler2DArray;

uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;
uniform sampler2D roughnessTexture;
uniform sampler2D normalTexture;

#define LIGHT_MODE_MOUSE 0
#define LIGHT_MODE_MIDDLE 1
#define LIGHT_MODE_LEFT 2
#define LIGHT_MODE_RIGHT 3

uniform vec3 lightPosition;
uniform int lightMode;

uniform int diffuseMode;
uniform int specularMode;
uniform int roughnessMode;
uniform int normalMode;

const float M_PI = 3.14;

const float fov = 45.0;
const float distance = 1.0 / tan(radians(fov / 2.0));
const vec3 viewPosition = vec3(0.0, 0.0, distance);
out vec4 color;

float sqr(float a) {
  return a * a;
}

#define MODE_MAP 0
#define MODE_VALUE 1
#define MODE_ONE 2
#define MODE_ZERO 3

vec4 readMap(sampler2D mapTexture, int mode, vec4 one, vec4 zero) {
    ivec2 coord = ivec2(
        gl_FragCoord.x, int(textureSize(mapTexture, 0).y) - int(gl_FragCoord.y)
    );
    if(mode == MODE_MAP) return texelFetch(mapTexture, coord, 0);
    if(mode == MODE_VALUE) return texelFetch(mapTexture, coord, 6);
    if(mode == MODE_ONE) return one;
    if(mode == MODE_ZERO) return zero;
}

vec3 getDiffuseAlbedo() {
  return pow(readMap(diffuseTexture, diffuseMode, vec4(1), vec4(0)).rgb, vec3(2.2));
}

vec3 getSpecularAlbedo() {
  return pow(readMap(specularTexture, specularMode, vec4(1), vec4(0)).rgb, vec3(2.2));
}

float getRoughness() {
  return pow(readMap(roughnessTexture, roughnessMode, vec4(0.5), vec4(0.5)).r, 2.2);
}

vec3 getNormal() {
  vec3 texel = readMap(normalTexture, normalMode, vec4(0.5, 0.5, 1, 0), vec4(0.5, 0.5, 1, 0)).rgb;
  return normalize(vec3(1,1,1) * (2.0 * texel - vec3(1)));
}

vec3 getPosition() {
    vec2 coord = gl_FragCoord.xy / vec2(textureSize(diffuseTexture, 0).xy);
    return vec3(2.0 * coord - vec2(1.0), 0) / vec3(1, 1.333, 1);
}

vec3 getLightPosition() {
  if(lightMode == LIGHT_MODE_MOUSE) return vec3(lightPosition.x, lightPosition.y, distance);
  if(lightMode == LIGHT_MODE_MIDDLE) return vec3(0,0,distance);
  if(lightMode == LIGHT_MODE_LEFT) return vec3(-1,0,distance);
  if(lightMode == LIGHT_MODE_RIGHT) return vec3(1,0,distance);
}

vec3 getLambertianReflectance(vec3 lightDirection) {
  return getDiffuseAlbedo() * (1.0 / M_PI) * max(0.0, dot(getNormal(), lightDirection));
}

vec3 getDiffuseReflectance(vec3 lightDirection) {
  return getLambertianReflectance(lightDirection);
}

float cosAngle(vec3 a, vec3 b) {
  return max(0.0, dot(a, b));
}

float ggxMicrofacet(float cosHalfAngle) {
  float alpha = sqr(getRoughness());
  return sqr(alpha) / (M_PI * sqr(sqr(cosHalfAngle) * (sqr(alpha) - 1.0) + 1.0));
}

vec3 constantFresnel(float differenceAngle) {
  return getSpecularAlbedo();
}

vec3 schlickFresnel(float differenceAngle) {
  return
    getSpecularAlbedo() +
    (vec3(1.0) - getSpecularAlbedo()) * pow(1.0 - differenceAngle, 5.0);
}

float getSmithsShadowing(float cosViewAngle, float cosLightAngle) {
  float alpha2 = sqr(sqr(getRoughness()));
  float G1o = 2.0 / (1.0 + sqrt(1.0 + alpha2 * (1.0 - cosViewAngle * cosViewAngle) / (cosViewAngle * cosViewAngle)));
  float G1i = 2.0 / (1.0 + sqrt(1.0 + alpha2 * (1.0 - cosLightAngle * cosLightAngle) / (cosLightAngle * cosLightAngle)));
  return G1o * G1i;
}

vec3 getMicrofacetReflectance(vec3 lightDirection, vec3 viewDirection) {

  // https://developer.blender.org/diffusion/B/browse/master/intern/cycles/kernel/closure/bsdf_microfacet.h
  vec3 halfDirection = normalize(0.5 * (lightDirection + viewDirection));
  float cosHalfAngle = max(0.0001, cosAngle(halfDirection, getNormal()));
  float cosLightAngle = max(0.0001, cosAngle(lightDirection, getNormal()));
  float cosViewAngle = max(0.0001, cosAngle(viewDirection, getNormal()));
  float cosDifferenceAngle = max(0.0001, cosAngle(halfDirection, lightDirection));

  return
    (
      ggxMicrofacet(cosHalfAngle) *
      schlickFresnel(cosDifferenceAngle) *
      getSmithsShadowing(cosViewAngle, cosLightAngle)
    ) /
    (4.0 * cosLightAngle);
}

vec3 getSpecularReflectance(vec3 lightDirection, vec3 viewDirection) {
  return getMicrofacetReflectance(lightDirection, viewDirection);
}

float radialLightAttenuation(float radialFalloff) {
  return pow(radialFalloff, 10.0);
}

vec3 lightDecay(float distance) {
  return 1.0 / (pow(vec3(distance), vec3(2.0)) + 1e-4);
}

vec3 shade() {

  vec3 lightDirection = getLightPosition() - getPosition();
  vec3 viewDirection = viewPosition - getPosition();

  vec3 shading = M_PI * (
    getDiffuseReflectance(normalize(lightDirection)) +
    getSpecularReflectance(normalize(lightDirection), normalize(viewDirection))
  );

  float lightDistance = length(lightDirection);
  vec3 lightDirectionCenter = vec3(0.0,0.0, 1.0);
  float falloff = cosAngle(normalize(lightDirection), lightDirectionCenter);

  shading = shading * lightDecay(lightDistance);
  shading = shading * radialLightAttenuation(falloff);
  shading = shading * pow(vec3(2.4), vec3(2.0));

  shading = pow(shading, vec3(1.0/2.2));
  return shading;
}

void main() {
  color = vec4(shade(), 1);
//  gl_FragCoord = gl_FragCoord;

}
</script>

<script id="renderingVertex" type="x-shader/x-vertex">#version 300 es
layout(location = 0) in vec2 pos;

void main() {
    gl_Position = vec4(pos, 0, 1.0);
}
</script>

<script src="jquery-3.4.1.min.js"></script>
<script type="text/javascript" src="../results/data.json"></script>
<script type="text/javascript" src="details.js"></script>

</body>

